From 9e43014313b155cd919760399c845cf6f28ac422 Mon Sep 17 00:00:00 2001
From: Martin Hostettler <textshell@uchuujin.de>
Date: Fri, 21 Dec 2018 16:58:21 +0100
Subject: [PATCH 1/9] chrome/browser/ui/views/tabs/tab_strip: Allow simple
 scrolling of tab bar. Increase minimum tab width by 60px.

---
 chrome/browser/ui/views/tabs/tab_strip.cc | 24 +++++++++++++++++++-----
 chrome/browser/ui/views/tabs/tab_strip.h  |  2 ++
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/chrome/browser/ui/views/tabs/tab_strip.cc b/chrome/browser/ui/views/tabs/tab_strip.cc
index d284029387de..ed53f0eb0b50 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip.cc
@@ -193,8 +193,8 @@ const TabSizeInfo& GetTabSizeInfo() {
       MD::IsTouchOptimizedUiEnabled() ? &touch_tab_size_info : &tab_size_info;
   if (info->standard_size.IsEmpty()) {
     info->pinned_tab_width = TabStyle::GetPinnedWidth();
-    info->min_active_width = TabStyle::GetMinimumActiveWidth();
-    info->min_inactive_width = TabStyle::GetMinimumInactiveWidth();
+    info->min_active_width = TabStyle::GetMinimumActiveWidth() + 60;
+    info->min_inactive_width = TabStyle::GetMinimumInactiveWidth() + 60;
     info->standard_size =
         gfx::Size(TabStyle::GetStandardWidth(), GetLayoutConstant(TAB_HEIGHT));
     info->tab_overlap = TabStyle::GetTabOverlap();
@@ -685,6 +685,17 @@ void TabStrip::SetSelection(const ui::ListSelectionModel& new_selection) {
       tab_at(new_selection.active())->ActiveStateChanged();
   }
 
+  if (new_selection.active() >= 0) {
+    int tab_x = tab_at(new_selection.active())->x();
+    int tab_width = tab_at(new_selection.active())->width();
+    int available_width = GetTabAreaWidth();
+    if (tab_x <= 0) {
+      vert_scroll_offset_ = std::max(static_cast<int>(vert_scroll_offset_ + tab_x - (tab_width * 1.5)), 0);
+    } else if (tab_x + tab_width > available_width) {
+      vert_scroll_offset_ += tab_x - available_width + (tab_width * 1.5);
+    }
+  }
+
   if (touch_layout_) {
     touch_layout_->SetActiveIndex(new_selection.active());
     // Only start an animation if we need to. Otherwise clicking on an
@@ -1358,7 +1369,7 @@ gfx::Size TabStrip::CalculatePreferredSize() const {
     // Don't let the tabstrip shrink smaller than is necessary to show one tab,
     // and don't force it to be larger than is necessary to show 20 tabs.
     const int largest_min_tab_width =
-        min_selected_width + 19 * (min_unselected_width - overlap);
+        min_selected_width + 4 * (min_unselected_width - overlap);
     needed_tab_width = std::min(std::max(needed_tab_width, min_selected_width),
                                 largest_min_tab_width);
   }
@@ -2254,8 +2265,11 @@ void TabStrip::GenerateIdealBounds() {
         &current_active_width_, &current_inactive_width_);
     DCHECK_EQ(static_cast<size_t>(tab_count()), tabs_bounds.size());
 
-    for (size_t i = 0; i < tabs_bounds.size(); ++i)
-      tabs_.set_ideal_bounds(i, tabs_bounds[i]);
+    for (size_t i = 0; i < tabs_bounds.size(); ++i) {
+      gfx::Rect bounds = tabs_bounds[i];
+      bounds.set_x(bounds.x() -vert_scroll_offset_);
+      tabs_.set_ideal_bounds(i, bounds);
+    }
   }
 
   new_tab_button_bounds_.set_origin(gfx::Point(NewTabButtonIdealX(), 0));
diff --git a/chrome/browser/ui/views/tabs/tab_strip.h b/chrome/browser/ui/views/tabs/tab_strip.h
index fbdbde8326c9..e47a7d135ec4 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.h
+++ b/chrome/browser/ui/views/tabs/tab_strip.h
@@ -692,6 +692,8 @@ class TabStrip : public views::View,
 
   SkColor separator_color_ = gfx::kPlaceholderColor;
 
+  int vert_scroll_offset_ = 0;
+
   ScopedObserver<ui::MaterialDesignController,
                  ui::MaterialDesignControllerObserver>
       md_observer_{this};
-- 
2.11.0

