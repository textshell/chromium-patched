From bb508a8fe0b95e635c21c7f59ebe4b15fcbad0fc Mon Sep 17 00:00:00 2001
From: My Name <my@email>
Date: Sat, 22 Oct 2016 13:07:17 +0200
Subject: [PATCH 1/7] chrome/browser/ui/views/tabs/tab_strip: Allow simple
 scrolling of tab bar. Increase minimum tab width by 60px.

---
 chrome/browser/ui/views/tabs/tab_strip.cc | 24 +++++++++++++++++++-----
 chrome/browser/ui/views/tabs/tab_strip.h  |  2 ++
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/chrome/browser/ui/views/tabs/tab_strip.cc b/chrome/browser/ui/views/tabs/tab_strip.cc
index e2919b6..8446b1b 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip.cc
@@ -250,8 +250,8 @@ const TabSizeInfo& GetTabSizeInfo() {
 
   tab_size_info = new TabSizeInfo;
   tab_size_info->pinned_tab_width = Tab::GetPinnedWidth();
-  tab_size_info->min_active_width = Tab::GetMinimumActiveSize().width();
-  tab_size_info->min_inactive_width = Tab::GetMinimumInactiveSize().width();
+  tab_size_info->min_active_width = Tab::GetMinimumActiveSize().width() + 60;
+  tab_size_info->min_inactive_width = Tab::GetMinimumInactiveSize().width() + 60;
   tab_size_info->max_size = Tab::GetStandardSize();
   tab_size_info->tab_overlap = GetLayoutConstant(TABSTRIP_TAB_OVERLAP);
   tab_size_info->pinned_to_normal_offset = kPinnedToNonPinnedOffset;
@@ -896,6 +896,17 @@ void TabStrip::SetSelection(const ui::ListSelectionModel& old_selection,
       tab_at(new_selection.active())->ActiveStateChanged();
   }
 
+  if (new_selection.active() >= 0) {
+    int tab_x = tab_at(new_selection.active())->x();
+    int tab_width = tab_at(new_selection.active())->width();
+    int available_width = GetTabAreaWidth();
+    if (tab_x <= 0) {
+      vert_scroll_offset_ = std::max(static_cast<int>(vert_scroll_offset_ + tab_x - (tab_width * 1.5)), 0);
+    } else if (tab_x + tab_width > available_width) {
+      vert_scroll_offset_ += tab_x - available_width + (tab_width * 1.5);
+    }
+  }
+
   if (touch_layout_) {
     touch_layout_->SetActiveIndex(new_selection.active());
     // Only start an animation if we need to. Otherwise clicking on an
@@ -1591,7 +1602,7 @@ gfx::Size TabStrip::GetPreferredSize() const {
     // Don't let the tabstrip shrink smaller than is necessary to show one tab,
     // and don't force it to be larger than is necessary to show 20 tabs.
     const int largest_min_tab_width =
-        min_selected_width + 19 * (min_unselected_width - Tab::kOverlap);
+        min_selected_width + 4 * (min_unselected_width - Tab::kOverlap);
     needed_tab_width = std::min(
         std::max(needed_tab_width, min_selected_width), largest_min_tab_width);
   }
@@ -2499,8 +2510,11 @@ void TabStrip::GenerateIdealBounds() {
                         &current_active_width_, &current_inactive_width_);
     DCHECK_EQ(static_cast<size_t>(tab_count()), tabs_bounds.size());
 
-    for (size_t i = 0; i < tabs_bounds.size(); ++i)
-      tabs_.set_ideal_bounds(i, tabs_bounds[i]);
+    for (size_t i = 0; i < tabs_bounds.size(); ++i) {
+      gfx::Rect bounds = tabs_bounds[i];
+      bounds.set_x(bounds.x() -vert_scroll_offset_);
+      tabs_.set_ideal_bounds(i, bounds);
+    }
   }
 
   const int max_new_tab_x = width() - newtab_button_bounds_.width();
diff --git a/chrome/browser/ui/views/tabs/tab_strip.h b/chrome/browser/ui/views/tabs/tab_strip.h
index 1a29593..d6f668e 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.h
+++ b/chrome/browser/ui/views/tabs/tab_strip.h
@@ -652,6 +652,8 @@ class TabStrip : public views::View,
   // True if tabs are painted as rectangular light-bars.
   bool immersive_style_;
 
+  int vert_scroll_offset_ = 0;
+
   // Our observers.
   typedef base::ObserverList<TabStripObserver> TabStripObservers;
   TabStripObservers observers_;
-- 
2.1.4

